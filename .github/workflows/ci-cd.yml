name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  DOTNET_VERSION: '9.0.x'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Build and Test Job
  build-and-test:
    name: Build & Test
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
        
    - name: Restore dependencies
      run: dotnet restore POSSystem.csproj
      
    - name: Build application
      run: dotnet build POSSystem.csproj --no-restore --configuration Release
      
    - name: Run tests
      run: |
        if [ -f "POSSystem.Tests/POSSystem.Tests.csproj" ]; then
          dotnet test POSSystem.Tests/POSSystem.Tests.csproj --no-build --configuration Release --logger trx --results-directory "TestResults"
        else
          echo "WARNING: No test project found, skipping tests"
        fi
        
    - name: Publish test results
      uses: dorny/test-reporter@v1
      if: success() || failure()
      with:
        name: Test Results
        path: TestResults/*.trx
        reporter: dotnet-trx
        
    - name: Build migrator
      run: dotnet build POSSystem.Migrator/POSSystem.Migrator.csproj --configuration Release

  # Code Quality Check Job
  code-quality:
    name: Code Quality
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
        
    - name: Restore dependencies
      run: dotnet restore POSSystem.csproj
      
    - name: Run static analysis
      run: dotnet format --verify-no-changes --verbosity diagnostic
      
    - name: Security scan
      uses: securecodewarrior/github-action-add-sarif@v1
      with:
        sarif-file: 'security-scan-results.sarif'
      continue-on-error: true

  # Docker Build Job
  docker-build:
    name: Docker Build
    runs-on: ubuntu-latest
    needs: [build-and-test, code-quality]
    if: github.event_name == 'push'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
      
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
          
    - name: Build and push API Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        
    - name: Build and push Migrator Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile.migrator
        push: true
        tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-migrator:${{ github.sha }}
        labels: ${{ steps.meta.outputs.labels }}

  # Integration Tests Job
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: docker-build
    if: github.event_name == 'push'
    
    services:
      sqlserver:
        image: mcr.microsoft.com/mssql/server:2022-latest
        env:
          SA_PASSWORD: DevPassword123!
          ACCEPT_EULA: Y
        ports:
          - 1433:1433
        options: --health-cmd="/opt/mssql-tools/bin/sqlcmd -S localhost -U sa -P DevPassword123! -Q 'SELECT 1'" --health-interval=10s --health-timeout=5s --health-retries=3
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
        
    - name: Run database migrations
      run: dotnet run --project POSSystem.Migrator/POSSystem.Migrator.csproj -- "Server=localhost,1433;Database=POSSystemDB_Test;User Id=sa;Password=DevPassword123!;TrustServerCertificate=true;MultipleActiveResultSets=true"
      
    - name: Run integration tests
      run: |
        if [ -f "POSSystem.IntegrationTests/POSSystem.IntegrationTests.csproj" ]; then
          dotnet test POSSystem.IntegrationTests/POSSystem.IntegrationTests.csproj --configuration Release
        else
          echo "WARNING: No integration tests found"
        fi

  # Release Job
  release:
    name: Release
    runs-on: ubuntu-latest
    needs: [integration-tests]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Create Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ github.run_number }}
        release_name: Release v${{ github.run_number }}
        body: |
          **Automated Release v${{ github.run_number }}**
          
          ## Changes in this Release
          - Automated build from commit ${{ github.sha }}
          
          ## Docker Images
          - API: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
          - Migrator: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-migrator:${{ github.sha }}
          
          ## Deployment
          Use the Docker images above for production deployment.
        draft: false
        prerelease: false
